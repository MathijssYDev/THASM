global Setup

size 300
stack 0

pointer @TMS9918_WRITE_MODE = 0x8600
pointer @TMS9918_WRITE = 0x8400

pointer @PATTERN_START = 0x2000 // Length 1000
pointer @PATTERN_START_+1 = 0x2000
pointer @PATTERN_STOP = 0x23E8
pointer @PS2KeyMap = 0x2400 // Length 80
pointer @Console_HeaderText = 0x2500 // Length 50


pointer @PS2_REG1 = 0xA100
pointer @PS2_REG2 = 0xA200
pointer @PS2_REG3 = 0xA400

pointer @COLOR_START = 0x3000
pointer @COLOR_STOP = 0x3F00

byte *0 $VRAM_NAME_ADDRESS_REGISTERVALUE = 14
byte *0 $VRAM_COLOR_ADDRESS_REGISTERVALUE = 0
byte *0 $VRAM_PATT_ADDRESS_REGISTERVALUE = 4
byte *0 $VRAM_SPRITE_PATT_ADDRESS_REGISTERVALUE = 3
byte *0 $VRAM_SPRITE_ATTR_ADDRESS_REGISTERVALUE = 118

byte *0 $VRAM_DEFAULT_PATT_ADDRESS_0 = 0b01111111 // originally 128
byte *0 $VRAM_DEFAULT_PATT_ADDRESS_1 = 0b11111110 // originally 0
byte *0 $VRAM_DEFAULT_NAME_ADDRESS_0 = 0b11011111 // originally 224
byte *0 $VRAM_DEFAULT_NAME_ADDRESS_1 = 0b11111110 // originally 0
byte *0 $VRAM_DEFAULT_COLOR_ADDRESS_0 = 0
byte *0 $VRAM_DEFAULT_COLOR_ADDRESS_1 = 0

byte *0 $TMS_REG_0 = 0b00000001
byte *0 $TMS_REG_1 = 0b00100001
byte *0 $REG_NAME_TABLE = 0b01000001
byte *0 $REG_COLOR_TABLE = 0b01100001
byte *0 $REG_PATTERN_TABLE = 0b10000001
byte *0 $REG_SPRITE_ATTR_TABLE = 0b10100001
byte *0 $REG_SPRITE_PATT_TABLE = 0b11000001
byte *0 $REG_FG_BG_COLOR = 0b11100001



function Setup                                                                      // Setup all the TMS9918 registers to the correct addresses and modes
    lda.ram > 0b00100101
    sta.ram * @TMS9918_WRITE_MODE
    lda.ram > $REG_FG_BG_COLOR
    sta.ram * @TMS9918_WRITE_MODE

    lda.ram > 0b00000000
    sta.ram * @TMS9918_WRITE_MODE
    lda.ram > $TMS_REG_0
    sta.ram * @TMS9918_WRITE_MODE

    lda.ram > 0b10010000
    sta.ram * @TMS9918_WRITE_MODE
    lda.ram > $TMS_REG_1
    sta.ram * @TMS9918_WRITE_MODE

    lda.ram > $VRAM_PATT_ADDRESS_REGISTERVALUE
    sta.ram * @TMS9918_WRITE_MODE
    lda.ram > $REG_PATTERN_TABLE
    sta.ram * @TMS9918_WRITE_MODE

    lda.ram > $VRAM_COLOR_ADDRESS_REGISTERVALUE
    sta.ram * @TMS9918_WRITE_MODE
    lda.ram > $REG_COLOR_TABLE
    sta.ram * @TMS9918_WRITE_MODE

    lda.ram > $VRAM_NAME_ADDRESS_REGISTERVALUE
    sta.ram * @TMS9918_WRITE_MODE
    lda.ram > $REG_NAME_TABLE
    sta.ram * @TMS9918_WRITE_MODE

    jmp * loadPatterns                                                               // When the setup is done, start loading the patterns into VRAM
end

byte $loopcount = 0
function loadPatterns

    lda.ram > $VRAM_DEFAULT_PATT_ADDRESS_0                                           // Load the default pattern address first byte -1 position
    sta.ram * @TMS9918_WRITE_MODE                                                    //   -> Store it in the TMS9918
    lda.ram > $VRAM_DEFAULT_PATT_ADDRESS_1                                           // Load the default pattern address second byte -1 position
    sta.ram * @TMS9918_WRITE_MODE                                                    //   -> Store it in the TMS9918
    lda.ram > 33                                                                     // Load with random value
    sta.ram * @TMS9918_WRITE_MODE

// ------------------------------------------------------------------------------
// -------------------------------- Pattern Loop --------------------------------
// ------------------------------------------------------------------------------
    $loadPatterns_Loop                                                               // Pattern loading loop start
        lda.rom *($PatternDataTable_HIGH,$PatternDataTable_LOW) @PATTERN_START_+1        // Get current pattern byte from the pattern Data Table
        sta.ram * @TMS9918_WRITE                                                         // Store the current byte into VRAM at <current VRAM address inside TMS9918>++

        lda.ram * $PatternDataTable_LOW                                                  // Load lower Lower nibble from Data Table pattern position

        cmp.ram > @PATTERN_STOP.LOW                                                      // Compare with the lower nibble of the STOP address
        jme * checkPatternHigh                                                           // If equal, jump to function that checks if higher nibble is also equal, in which case it's done with loading
        $returnAfterPatternLoop                                                          // Return location if higher nibble was not equal yet

        inc                                                                              // Increment the lower nibble
        sta.ram * $PatternDataTable_LOW                                                  // Store the lower nibble in the Data Table pattern position

        lda.ram * $PatternDataTable_HIGH                                                 // Load higher nibble from Data Table pattern position
        adc.ram > 0                                                                      // Increment the higher nibble
        sta.ram * $PatternDataTable_HIGH                                                 // Store the higher nibble to Data Table pattern position

        jmp * $loadPatterns_Loop                                                         // Jump to the start of the loop to get the next byte

    $afterPatternLoop                                                                // When pattern loading is done, jump here
    jmp * Console_Setup
end
function checkPatternHigh
    lda.ram * $PatternDataTable_HIGH
    cmp.ram > @PATTERN_STOP.HIGH

    jme * $afterPatternLoop

    lda.ram * $PatternDataTable_LOW
    jmp * $returnAfterPatternLoop
end


// -------------------------------------------------------------------------------
// ------------------------------- Console Program -------------------------------
// -------------------------------------------------------------------------------
byte $lastKey = 0
data *@Console_HeaderText
    0,0,0,0,0,0,0,0,0,0,0,0,0,52,40,37,47,19,18,0,0,47,51,0,54,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30
data end

byte $Console_CharacterCounter_LOW = 41
byte $Console_CharacterCounter_HIGH = 0

function Console_Setup
    lda.ram > 0b11110100
    sta.ram * @TMS9918_WRITE_MODE
    lda.ram > $REG_FG_BG_COLOR
    sta.ram * @TMS9918_WRITE_MODE

    lda.ram > $VRAM_DEFAULT_NAME_ADDRESS_0                                           // Load the default name address first byte -1 position
    sta.ram * @TMS9918_WRITE_MODE                                                    //   -> Store it in the TMS9918
    lda.ram > $VRAM_DEFAULT_NAME_ADDRESS_1                                           // Load the default name address second byte -1 position
    sta.ram * @TMS9918_WRITE_MODE                                                    //   -> Store it in the TMS9918
    lda.ram > 40
    sta.ram * @TMS9918_WRITE_MODE

    $Console_HT_Loop
        lda.rom *($Console_HT_HIGH,$Console_HT_LOW) @Console_HeaderText
        sta.ram * @TMS9918_WRITE

        lda.ram * $Console_HT_LOW
        inc
        cmp.ram > 41
        jme * Terminal_Loop

        sta.ram * $Console_HT_LOW

        jmp * $Console_HT_Loop

end
function Terminal_Loop
    // # CHECK IF REG2 IS EQUAL TO RELEASE
    lda.ram * @PS2_REG2
    cmp.ram > 0xF0
    jme * Terminal_keyRelease // # IF SO, RELEASE KEY

    lda.ram * $lastKey
    cmp.ram > 0
    jme * Terminal_keyPress

    jmp * Terminal_Loop
end
function Terminal_keyPress
    lda.ram * @PS2_REG2
    cmp.ram * 0xF0
    jme * Terminal_Loop

    // # ELSE, SET LAST KEY TO CURRENT KEY
    lda.ram * @PS2_REG1
    sta.ram * $lastKey

    // # SET ASCII_L TO CURRENT CHARACTER TO SET ASCII BYTE ADDRESS
    sta.ram * $ASCII_L

    // # STORE ASCII KEYCODE IN RAM
    lda.rom *($ASCII_H,$ASCII_L) @PS2KeyMap
    cmp.ram > 0x66                                  // Backspace
    jme * Terminal_Backspace

    sta.ram * @TMS9918_WRITE
    //sta.ram *($PS2_H,$PS2_L) 0x0200

    lda.ram * $Console_CharacterCounter_LOW
    inc
    sta.ram * $Console_CharacterCounter_LOW
    lda.ram * $Console_CharacterCounter_HIGH
    adc.ram > 0
    sta.ram * $Console_CharacterCounter_HIGH

    // # INCREMENT RAM POSITION
   // lda.ram * $PS2_L
    //inc
   // sta.ram * $PS2_L

    jmp * Terminal_Loop
end
function Terminal_Backspace
    lda.ram > 0xff
    sta.ram * 0x002f

    lda.ram * $Console_CharacterCounter_LOW
    dec
    dec
    sta.ram * $Console_CharacterCounter_LOW
    lda.ram * $Console_CharacterCounter_HIGH
    suc.ram > 0
    sta.ram * $Console_CharacterCounter_HIGH

    lda.ram > $Console_CharacterCounter_LOW
    ror
    ror
    sta.ram * @TMS9918_WRITE_MODE
    lda.ram > $VRAM_DEFAULT_NAME_ADDRESS_1
    sta.ram * @TMS9918_WRITE_MODE
    lda.ram > 0
    sta.ram * @TMS9918_WRITE_MODE

    jmp * Terminal_Loop
end
function Terminal_keyRelease
    lda.ram > 0
    sta.ram * $lastKey

    jmp * Terminal_Loop
end
data *@PS2KeyMap // PS2 Keyboard key mapped to TMS9918 VRAM
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x31,0x11,0x00,0x00,0x00,0x3A,0x33,0x21,0x37,0x12,0x00,
   0x00,0x23,0x38,0x24,0x25,0x14,0x13,0x00,0x00,0x00,0x36,0x26,0x34,0x32,0x15,0x00,
   0x00,0x2E,0x22,0x28,0x27,0x39,0x16,0x00,0x00,0x00,0x2D,0x2A,0x35,0x17,0x18,0x00,
   0x00,0x0C,0x2B,0x29,0x2F,0x10,0x19,0x00,0x00,0x0E,0x1B,0x2C,0x1A,0x30,0x0D,0x00,
   0x00,0x00,0x07,0x00,0x3B,0x0B,0x00,0x00,0x00,0x00,0x0A,0x3D,0x00,0x3C,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x7F,0x00,0x00,0x00,0x00,0x1B,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,
data end
data *@PATTERN_START
   0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,  // ' ' 0
   0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00,  // ! 1
   0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00,  // " 2
   0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00,  // # 3
   0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00,  // $ 4
   0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00,  // % 5
   0x40,0xA0,0xA0,0x40,0xA8,0x90,0x68,0x00,  // & 6
   0x20,0x20,0x40,0x00,0x00,0x00,0x00,0x00,  // ' 7
   0x20,0x40,0x80,0x80,0x80,0x40,0x20,0x00,  // ( 8
   0x20,0x10,0x08,0x08,0x08,0x10,0x20,0x00,  // ) 9
   0x20,0xA8,0x70,0x20,0x70,0xA8,0x20,0x00,  // * 10
   0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00,  // + 11
   0x00,0x00,0x00,0x00,0x20,0x20,0x40,0x00,  // , 12
   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,  // - 13
   0x00,0x00,0x00,0x00,0x20,0x20,0x00,0x00,  // . 14
   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,  // / 15
   0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00,  // 0 16
   0x20,0x60,0x20,0x20,0x20,0x20,0x70,0x00,  // 1 17
   0x70,0x88,0x08,0x30,0x40,0x80,0xF8,0x00,  // 2 18
   0xF8,0x08,0x10,0x30,0x08,0x88,0x70,0x00,  // 3 19
   0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00,  // 4 20
   0xF8,0x80,0xF0,0x08,0x08,0x88,0x70,0x00,  // 5 21
   0x38,0x40,0x80,0xF0,0x88,0x88,0x70,0x00,  // 6 22
   0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00,  // 7 23
   0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00,  // 8 24
   0x70,0x88,0x88,0x78,0x08,0x10,0xE0,0x00,  // 9 25
   0x00,0x00,0x20,0x00,0x20,0x00,0x00,0x00,  // : 26
   0x00,0x00,0x20,0x00,0x20,0x20,0x40,0x00,  // / 27
   0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00,  // < 28
   0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00,  // = 29
   0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00,  // > 30
   0x70,0x88,0x10,0x20,0x20,0x00,0x20,0x00,  // ? 31
   0x70,0x88,0xA8,0xB8,0xB0,0x80,0x78,0x00,  // @ 32
   0x20,0x50,0x88,0x88,0xF8,0x88,0x88,0x00,  // A 33
   0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00,  // B 34
   0x70,0x88,0x80,0x80,0x80,0x88,0x70,0x00,  // C 35
   0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00,  // D 36
   0xF8,0x80,0x80,0xF0,0x80,0x80,0xF8,0x00,  // E 37
   0xF8,0x80,0x80,0xF0,0x80,0x80,0x80,0x00,  // F 38
   0x78,0x80,0x80,0x80,0x98,0x88,0x78,0x00,  // G 39
   0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00,  // H 40
   0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00,  // I 41
   0x08,0x08,0x08,0x08,0x08,0x88,0x70,0x00,  // J 42
   0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00,  // K 43
   0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00,  // L 44
   0x88,0xD8,0xA8,0xA8,0x88,0x88,0x88,0x00,  // M 45
   0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00,  // N 46
   0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00,  // O 47
   0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00,  // P 48
   0x70,0x88,0x88,0x88,0xA8,0x90,0x68,0x00,  // Q 49
   0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00,  // R 50
   0x70,0x88,0x80,0x70,0x08,0x88,0x70,0x00,  // S 51
   0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00,  // T 52
   0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00,  // U 53
   0x88,0x88,0x88,0x88,0x50,0x50,0x20,0x00,  // V 54
   0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00,  // W 55
   0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00,  // X 56
   0x88,0x88,0x50,0x20,0x20,0x20,0x20,0x00,  // Y 57
   0xF8,0x08,0x10,0x20,0x40,0x80,0xF8,0x00,  // Z 58
   0xF8,0xC0,0xC0,0xC0,0xC0,0xC0,0xF8,0x00,  // [ 59
   0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,  // \ 60
   0xF8,0x18,0x18,0x18,0x18,0x18,0xF8,0x00,  // ] 61
   0x00,0x00,0x20,0x50,0x88,0x00,0x00,0x00,  // ^ 62
   0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,  // _ 63
   0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00,  // ` 64
   0x00,0x00,0x70,0x88,0x88,0x98,0x68,0x00,  // a 65
   0x80,0x80,0xF0,0x88,0x88,0x88,0xF0,0x00,  // b 66
   0x00,0x00,0x78,0x80,0x80,0x80,0x78,0x00,  // c
   0x08,0x08,0x78,0x88,0x88,0x88,0x78,0x00,  // d
   0x00,0x00,0x70,0x88,0xF8,0x80,0x78,0x00,  // e
   0x30,0x40,0xE0,0x40,0x40,0x40,0x40,0x00,  // f
   0x00,0x00,0x70,0x88,0xF8,0x08,0xF0,0x00,  // g
   0x80,0x80,0xF0,0x88,0x88,0x88,0x88,0x00,  // h
   0x00,0x40,0x00,0x40,0x40,0x40,0x40,0x00,  // i
   0x00,0x20,0x00,0x20,0x20,0xA0,0x60,0x00,  // j
   0x00,0x80,0x80,0xA0,0xC0,0xA0,0x90,0x00,  // k
   0xC0,0x40,0x40,0x40,0x40,0x40,0x60,0x00,  // l
   0x00,0x00,0xD8,0xA8,0xA8,0xA8,0xA8,0x00,  // m
   0x00,0x00,0xF0,0x88,0x88,0x88,0x88,0x00,  // n
   0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00,  // o
   0x00,0x00,0x70,0x88,0xF0,0x80,0x80,0x00,  // p
   0x00,0x00,0xF0,0x88,0x78,0x08,0x08,0x00,  // q
   0x00,0x00,0x70,0x88,0x80,0x80,0x80,0x00,  // r
   0x00,0x00,0x78,0x80,0x70,0x08,0xF0,0x00,  // s
   0x40,0x40,0xF0,0x40,0x40,0x40,0x30,0x00,  // t
   0x00,0x00,0x88,0x88,0x88,0x88,0x78,0x00,  // u
   0x00,0x00,0x88,0x88,0x90,0xA0,0x40,0x00,  // v
   0x00,0x00,0x88,0x88,0x88,0xA8,0xD8,0x00,  // w
   0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00,  // x
   0x00,0x00,0x88,0x88,0x78,0x08,0xF0,0x00,  // y
   0x00,0x00,0xF8,0x10,0x20,0x40,0xF8,0x00,  // z
   0x38,0x40,0x20,0xC0,0x20,0x40,0x38,0x00,  // {
   0x40,0x40,0x40,0x00,0x40,0x40,0x40,0x00,  // |
   0xE0,0x10,0x20,0x18,0x20,0x10,0xE0,0x00,  // }
   0x40,0xA8,0x10,0x00,0x00,0x00,0x00,0x00,  // ~
   0xA8,0x50,0xA8,0x50,0xA8,0x50,0xA8,0x00  // checkerboard
data end
